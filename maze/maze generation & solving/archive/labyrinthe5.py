
#* Labyrinthe                                                                   

#* Modules                                                                   
import pygame as p
import random
import copy
import csv




#* Setup de la fenêtre                                                            


p.init()
fenetre = p.display.set_mode((1000, 600))
backGroundColor=p.Color("LIGHTGREY")
fenetre.fill(backGroundColor)

#- 0=vide 1=mur 2=player 3=entrée 4=sortie
#- pour des cases de 20*20 on aurait 31*43 cases maximum

#* Setup des variables                                                          

#- Matrices de labyrinthes de test
L=[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
[1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1],
[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1],
[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

L2=[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
[1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1],
[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1],
[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

Limp=[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1],
[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
[1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1],
[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1],
[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

T = [[1,1,1,1,1,1,1,1,1],
[1,4,0,0,1,0,0,0,1],
[1,1,1,0,1,0,0,0,1],
[1,1,1,0,1,0,0,0,1],
[1,1,1,0,1,0,1,1,1],
[1,1,1,0,0,0,1,1,1],
[1,1,1,1,1,0,1,1,1],
[1,0,0,0,0,0,0,0,1],
[1,3,1,1,1,1,1,1,1]]

N=[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 4, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
 [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 
0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 
0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0
, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1
, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1],
 [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 
1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 
0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0
, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 
1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0
, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0
, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1],
 [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0
, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0
, 0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1
, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0
, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1],
 [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1]]





#- police pour les numéros et ou textes

font1 = p.font.SysFont('sysfont', 25)

color='#%02x%02x%02x' % (213, 30, 250)
color2='#D922FD'









#* Toutes les fonctions                                                                 


#- Fonction de conversion de la matrice tiled

def conversionMatrice(file):
    with open(file,'r') as f:
        reader = csv.reader(f)
        data = list(reader)

    for j in range (len(data)):
        for i in range(len(data[j])):
            if data[j][i]=='4999':
                data[j][i]=1
            if data[j][i]=='-1':
                data[j][i]=0
            if data[j][i]=='4954':
                data[j][i]=4
            if data[j][i]=='4904':
                data[j][i]=3
    return data



#- Fonction principale du test de labyrinthe

def labyPoss (L):
    global posSor
    for i in range (len(L)):
        for j in range (len(L[0])) :
            if L[i][j]==4:
                posSor=(i,j)
            if L[i][j]==3:
                posDep=(i,j)
    x,y=posDep[0]-1,posDep[1]
    R=[[(x,y)]]
    while len(R)>=1 :
        for C in R :
            x,y = C[len(C)-1]
            if L[x][y]==4:
                return('yes',C)
            
            for i in range(4):
                
                if deplacement(L,x,y)[i]:
                    if i==0 and not((x-1,y) in C):
                        R=R+[C+[(x-1,y)]]
                    if i==1 and not((x,y+1) in C):
                        R=R+[C+[(x,y+1)]]
                    if i==2 and not((x+1,y) in C):
                        R=R+[C+[(x+1,y)]]
                    if i==3 and not((x,y-1) in C):
                        R=R+[C+[(x,y-1)]]
                    
            if len(R)==0:
                img1 = font1.render('IMPOSSIBLE', True, 'red')
                fenetre.blit(img1, (600, 100)) 
                return('no')
                
            for K in range(len(R)):
                if R[K]==C:
                    del(R[K])
                    break
    img1 = font1.render('IMPOSSIBLE', True, 'red')
    fenetre.blit(img1, (600, 100)) 
    return('no')
    



#- Check des directions de déplacements possibles

def deplacement(L,x,y):
    N,E,S,W = 1,1,1,1
    if x+1<=len(L):
        if L[x+1][y] in (1,3):
            S=0
    if x-1>0:
        if L[x-1][y] in (1,3):
            N=0
    if y+1<=len(L[0]):
        if L[x][y+1] in (1,3):
            E=0
    if y-1>0:
        if L[x][y-1] in (1,3):
            W=0
    return(N,E,S,W)



#- Affichage

def affichage (L):
    for i in range (len(L)):
        img1 = font1.render(str(i), True, '#575757')
        fenetre.blit(img1, (28, 50+20*i))   
        for j in range (len(L[0])) :
            if i==0:
                img1 = font1.render(str(j), True, '#575757')
                fenetre.blit(img1, (52+20*j, 28))  
            if L[i][j]==1:
                p.draw.rect(fenetre, '#575757', (50+20*j, 50+20*i, 20, 20))
            if L[i][j]==3:
                p.draw.rect(fenetre, 'red', (50+20*j, 50+20*i, 20, 20))
            if L[i][j]==4:
                p.draw.rect(fenetre, 'green', (50+20*j, 50+20*i, 20, 20))



#- Affichage du tracé de la solution

def affichageSolution (S):
    c=255
    a=255
    b=0
    a1,b1,c1=random.randint(1,5),random.randint(1,5),random.randint(1,5)
    for P in S:
        if c>=5:
            c-=c1
        else:
            c=0
        if a>=5:
            a-=a1
        else:
            a=0
        if b<=250:
            b+=b1
        else:
            b=255
        if P==posSor :
            break
        color='#%02x%02x%02x' % (b, c, a)
        p.draw.rect(fenetre, color, (50+20*P[1], 50+20*P[0], 20, 20))

#- Affichage d'un chemin

def affichageChemin (C):
    c=255
    a=255
    b=0
    a1,b1,c1=random.randint(1,5),random.randint(1,5),random.randint(1,5)
    for P in C:
        if c>=5:
            c-=c1
        else:
            c=0
        if a>=5:
            a-=a1
        else:
            a=0
        if b<=250:
            b+=b1
        else:
            b=255
        color='#%02x%02x%02x' % (b, c, a)
        p.draw.rect(fenetre, color, (50+20*P[1], 50+20*P[0], 20, 20))

#- Création d'un chemin aléatoire

def chemin_alea(L,La,x,y):
    C=[(x,y)]
    dpre=0
    for i in range (100):
        
        x,y=C[len(C)-1]
        if random.random()<0.7:
            d=dpre
        else :
            d=random.randint(0,3)
        if d==0 :
            if x-1>=0:
                if La[x-1][y]==1 and random.random()<0.2 and (x-1,y) not in C and L[x-1][y]==0:
                    C+=[(x-1,y)]
                elif La[x-1][y]==0 and (x-1,y) not in C and L[x-1][y]==0:
                    C+=[(x-1,y)]
        if d==1 :
            if y+1<=len(L[0]):
                if La[x][y+1]==1 and random.random()<0.2 and (x,y+1) not in C and L[x][y+1]==0:
                    C+=[(x,y+1)]
                elif La[x][y+1]==0 and (x,y+1) not in C and L[x][y+1]==0:
                    C+=[(x,y+1)]
        if d==2 :
            if x+1<=len(L):
                if La[x+1][y]==1 and random.random()<0.2 and (x+1,y) not in C and L[x+1][y]==0:
                    C+=[(x+1,y)]
                elif La[x+1][y]==0 and (x+1,y) not in C and L[x+1][y]==0:
                    C+=[(x+1,y)]
        if d==3 :
            if y-1>=0:
                if La[x][y-1]==1 and random.random()<0.2 and (x,y-1) not in C and L[x][y-1]==0:
                    C+=[(x,y-1)]
                elif La[x][y-1]==0 and (x,y-1) not in C and L[x][y-1]==0:
                    C+=[(x,y-1)]
        dpre=d
    

    
    return(C)


#- Création d'un labyrinthe aléatoire

def labyAlea (n,m):
    L = [[0 for j in range(m)] for i in range(n)]
    #mettre des 1 sur les bords
    for j in range(m):  
        L[0][j]=1
        L[n-1][j]=1
    for i in range(n):
        L[i][0]=1
        L[i][m-1]=1
    #mettre la sortie en haut et l'entrée en bas
    y,z=random.randint(1,m-2)//2*2+1,random.randint(1,m-2)//2*2
    L[0][z]=4
    L[1][z]=0
    L[n-1][y]=3
    L[n-2][y]=0
    L2=copy.deepcopy(L[:])
    C=chemin_alea(L,L,n-2,y)
    L2=encadrement_chemin(C,L2)
    for i in range(500):
        C=chemin_alea(L,L2,n-2,y)
        L2=encadrement_chemin(C,L2)
    





    #mettre de l'espace pour le passage
    for i in range(n//2-1):
        for j in range(m//2-1):
            L[2*i+1][2*j+1]=0
   
    #mettre la sortie en haut et l'entrée en bas
    
    
    
    L2[1][z]=0
    
    L2[n-2][y]=0

    return(L2)

#- Encadrement d'un chemin

def encadrement_chemin(C,L):

    for P in C:
        x,y=P[0],P[1]
        if x-1>=0:
            if not((x-1,y) in C) and L[x-1][y]!=4 and L[x-1][y]!=3:
                L[x-1][y]=1
        if y+1<len(L[0]):
            if not((x,y+1) in C) and L[x][y+1]!=4 and L[x][y+1]!=3:
                L[x][y+1]=1
        if x+1<len(L):
            if not((x+1,y) in C) and L[x+1][y]!=4 and L[x+1][y]!=3:
                L[x+1][y]=1
        if y-1>=0:
            if not((x,y-1) in C) and L[x][y-1]!=4 and L[x][y-1]!=3:
                L[x][y-1]=1
        L[x][y]=0
    return(L)






#* Execution                                                                    




#-Labyrinthe à étudier

Liste_à_étudier = L2


#-Execution des fonctions


affichage(Liste_à_étudier)
#affichageChemin(chemin_alea(Liste_à_étudier,Liste_à_étudier,2,3))


poss = labyPoss(Liste_à_étudier)
if poss[0]=='yes':

    affichage(Liste_à_étudier)
    affichageSolution(poss[1])









#- Pour quitter la fenetre

continuer = 1
while continuer:

    for event in p.event.get():
        if event.type==p.QUIT:
            p.quit()
        #lorsqu'on appuie sur v
        if event.type==p.KEYDOWN:
            if event.key==p.K_v:
                poss = labyPoss(Liste_à_étudier)
                t=0
                while t==0:
                    Liste_à_étudier = labyAlea(20,20)
                    poss = labyPoss(Liste_à_étudier)
                    if poss[0]=='yes':
                        t==1
                        affichage(Liste_à_étudier)
                        affichageSolution(poss[1])



    p.display.flip()






#* Fin Du Code                                                                              